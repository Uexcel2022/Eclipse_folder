package Resources;

public class resource {
	
	public static String invalidChar = "";
	
	
	public static void main(String[] args) {
		
		System.out.println(Resources.resource.isDigit("1-1", "-"));
	}
	
	public static String capitalized(String string) {
		String newString = " ";
		String[] splittedString = string.split(" ");
		for (int i = 0; i < splittedString.length; i++) {
			for (int j = 0; j < splittedString[i].length(); j++) {
				if (j == 0) {
					newString += String.valueOf(splittedString[i].charAt(j)).toUpperCase();
				} else {
					newString += String.valueOf(splittedString[i].charAt(j));
				}
			}
			newString += " ";
		}

		return newString;

	}

	public static String toTitleCase(String string) {

		String titleCase = String.valueOf(string.charAt(0)).toUpperCase();
		for (int i = 1; i < string.length(); i++) {
			titleCase += string.charAt(i);
		}

		return titleCase;
	}

	public static String checkString(String string, String exception) {
		String alpha = null;
		String[] splittedString = string.split(":");
		string = splittedString[0];
		String isIn[] = new String[string.length()];
		String notIn[] = new String[string.length()];

		if (!exception.isEmpty()) {
			if (exception.contains("0-9")) {
				alpha = "abcdefghijklmnopqrstuvwxyz0123456789" + exception;
			} else
				alpha = "abcdefghijklmnopqrstuvwxyz" + exception;
		} else
			alpha = "abcdefghijklmnopqrstuvwxyz";

		char[] alphaChr = alpha.toCharArray();
		for (int i = 0; i < string.length(); i++) {
			for (int j = 0; j < alphaChr.length; j++) {
				if (String.valueOf(alphaChr[j]).equalsIgnoreCase(String.valueOf(string.charAt(i)))) {
					isIn[i] = String.valueOf(string.charAt(i));
				} else
					notIn[i] = String.valueOf(string.charAt(i));
			}
		}
		invalidChar = "";
		for (int i = 0; i < isIn.length; i++) {
			if (isIn[i] == null) {
				invalidChar += notIn[i];
			}
		}
		if (invalidChar.length() > 0) {
			if (invalidChar.isBlank()) {
				invalidChar = "unsual charater spacing.";
				return null;
			} else
				return null;
		}
		
		return string;
	}
	
	public static String isDigit(String digit, String exception) {
		String[] validChars = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", exception };
		int charsInDigitCount = 0;
		int validCharsInDigitCount = 0;
		String unwatedChars = "";
		String validCharInDigit = "";

		String[] k = digit.split(" ");
		for (int i = 0; i < k.length; i++) {
			char[] b = k[i].toCharArray();
			for (int j = 0; j < b.length; j++) {
				charsInDigitCount++;
				for (int c = 0; c < validChars.length; c++) {
					if (String.valueOf(b[j]).equalsIgnoreCase(String.valueOf(validChars[c]))) {
						validCharInDigit += String.valueOf(b[j]) + " ";
						validCharsInDigitCount++;
					}
				}

			}
		}

		if (charsInDigitCount > validCharsInDigitCount) {
			int h = 0;
			int p = 0;
			String[] notIndex = new String[digit.length()];
			char[] v = digit.toCharArray();
			char[] y = validCharInDigit.toCharArray();
			for (p = 0; p < v.length; p++) {
				for (h = 0; h < y.length; h++) {
					if (!String.valueOf(v[p]).isBlank()) {
						if (v[p] == y[h]) {
							notIndex[p] = String.valueOf(p);
							break;
						}
					}
				}
			}
			for (int i = 0; i < notIndex.length; i++) {
				if (notIndex[i] == null && v[i] != ' ') {
					unwatedChars += (String.valueOf(digit.charAt(i))) + ' ';
				}
			}

		}

		String[] A = digit.split(" ");
		String chk[] = new String[A.length];
		String chk2[] = new String[A.length];
		char[] x = unwatedChars.toCharArray();
		for (int i = 0; i < A.length; i++) {
			if (String.valueOf(A[i]).equalsIgnoreCase("-") || String.valueOf(A[i]).equalsIgnoreCase("-0")) {
				unwatedChars += String.valueOf(A[i]) + ' ';
			}

			char[] a = A[i].toCharArray();
			for (int j = 0; j < a.length; j++) {
				if (a[j] == '-' && j > 0) {
					chk2[i] = A[i];
					for (int n = 0; n < x.length; n++) {
						if (a[0] == x[n]) {
							chk[i] = A[i];
							unwatedChars = unwatedChars.replace(String.valueOf(x[n]), A[i]);
						}
					}
				}
			}
		}

		for (int i = 0; i < chk.length; i++) {
			if (chk[i] != chk2[i]) {
				unwatedChars += chk2[i] + ' ';
			}
		}
		if (!unwatedChars.isBlank()) {
			return "Invlid character(s) detected. Remove: " + unwatedChars;
		} else
			return null;
	}

}
